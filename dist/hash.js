import { createHash } from "crypto";
import { openSync, readSync, closeSync, statSync } from "fs";
const bufferSize = 1024;
const buffer = Buffer.alloc(bufferSize);
export function hashFile(filePath) {
    const sha = createHash("sha256");
    const fileDescriptor = openSync(filePath, "r");
    const size = statSync(filePath).size;
    let totalBytesRead = 0;
    while (totalBytesRead < size) {
        const bytesRead = readSync(fileDescriptor, buffer, 0, Math.min(size - totalBytesRead, bufferSize), totalBytesRead);
        if (bytesRead < bufferSize) {
            sha.update(buffer.slice(0, bytesRead));
        }
        else {
            sha.update(buffer);
        }
        totalBytesRead += bytesRead;
    }
    closeSync(fileDescriptor);
    return sha.digest("hex");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYXNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxRQUFRLENBQUE7QUFDbkMsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLElBQUksQ0FBQTtBQUU1RCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUE7QUFFdkIsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQTtBQUV2QyxNQUFNLFVBQVUsUUFBUSxDQUFDLFFBQWdCO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNoQyxNQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQzlDLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUE7SUFDcEMsSUFBSSxjQUFjLEdBQUcsQ0FBQyxDQUFBO0lBQ3RCLE9BQU8sY0FBYyxHQUFHLElBQUksRUFBRTtRQUM1QixNQUFNLFNBQVMsR0FBRyxRQUFRLENBQ3hCLGNBQWMsRUFDZCxNQUFNLEVBQ04sQ0FBQyxFQUNELElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLGNBQWMsRUFBRSxVQUFVLENBQUMsRUFDM0MsY0FBYyxDQUNmLENBQUE7UUFDRCxJQUFJLFNBQVMsR0FBRyxVQUFVLEVBQUU7WUFDMUIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFBO1NBQ3ZDO2FBQU07WUFDTCxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1NBQ25CO1FBQ0QsY0FBYyxJQUFJLFNBQVMsQ0FBQTtLQUM1QjtJQUNELFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQTtJQUN6QixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUhhc2ggfSBmcm9tIFwiY3J5cHRvXCJcbmltcG9ydCB7IG9wZW5TeW5jLCByZWFkU3luYywgY2xvc2VTeW5jLCBzdGF0U3luYyB9IGZyb20gXCJmc1wiXG5cbmNvbnN0IGJ1ZmZlclNpemUgPSAxMDI0XG5cbmNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyhidWZmZXJTaXplKVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzaEZpbGUoZmlsZVBhdGg6IHN0cmluZykge1xuICBjb25zdCBzaGEgPSBjcmVhdGVIYXNoKFwic2hhMjU2XCIpXG4gIGNvbnN0IGZpbGVEZXNjcmlwdG9yID0gb3BlblN5bmMoZmlsZVBhdGgsIFwiclwiKVxuICBjb25zdCBzaXplID0gc3RhdFN5bmMoZmlsZVBhdGgpLnNpemVcbiAgbGV0IHRvdGFsQnl0ZXNSZWFkID0gMFxuICB3aGlsZSAodG90YWxCeXRlc1JlYWQgPCBzaXplKSB7XG4gICAgY29uc3QgYnl0ZXNSZWFkID0gcmVhZFN5bmMoXG4gICAgICBmaWxlRGVzY3JpcHRvcixcbiAgICAgIGJ1ZmZlcixcbiAgICAgIDAsXG4gICAgICBNYXRoLm1pbihzaXplIC0gdG90YWxCeXRlc1JlYWQsIGJ1ZmZlclNpemUpLFxuICAgICAgdG90YWxCeXRlc1JlYWQsXG4gICAgKVxuICAgIGlmIChieXRlc1JlYWQgPCBidWZmZXJTaXplKSB7XG4gICAgICBzaGEudXBkYXRlKGJ1ZmZlci5zbGljZSgwLCBieXRlc1JlYWQpKVxuICAgIH0gZWxzZSB7XG4gICAgICBzaGEudXBkYXRlKGJ1ZmZlcilcbiAgICB9XG4gICAgdG90YWxCeXRlc1JlYWQgKz0gYnl0ZXNSZWFkXG4gIH1cbiAgY2xvc2VTeW5jKGZpbGVEZXNjcmlwdG9yKVxuICByZXR1cm4gc2hhLmRpZ2VzdChcImhleFwiKVxufVxuIl19