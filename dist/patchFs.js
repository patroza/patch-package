import { getPackageDetailsFromPatchFilename, } from "./PackageDetails.js";
import { relative } from "./path.js";
import klawSync from "klaw-sync";
export const getPatchFiles = (patchesDir) => {
    try {
        return klawSync(patchesDir, { nodir: true })
            .map(({ path }) => relative(patchesDir, path))
            .filter((path) => path.endsWith(".patch"));
    }
    catch (e) {
        return [];
    }
};
export const getGroupedPatches = (patchesDirectory) => {
    const files = getPatchFiles(patchesDirectory);
    if (files.length === 0) {
        return {
            numPatchFiles: 0,
            pathSpecifierToPatchFiles: {},
            warnings: [],
        };
    }
    const warnings = [];
    const pathSpecifierToPatchFiles = {};
    for (const file of files) {
        const details = getPackageDetailsFromPatchFilename(file);
        if (!details) {
            warnings.push(`Unrecognized patch file in patches directory ${file}`);
            continue;
        }
        if (!pathSpecifierToPatchFiles[details.pathSpecifier]) {
            pathSpecifierToPatchFiles[details.pathSpecifier] = [];
        }
        pathSpecifierToPatchFiles[details.pathSpecifier].push(details);
    }
    for (const arr of Object.values(pathSpecifierToPatchFiles)) {
        arr.sort((a, b) => {
            var _a, _b;
            return ((_a = a.sequenceNumber) !== null && _a !== void 0 ? _a : 0) - ((_b = b.sequenceNumber) !== null && _b !== void 0 ? _b : 0);
        });
    }
    return {
        numPatchFiles: files.length,
        pathSpecifierToPatchFiles,
        warnings,
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0Y2hGcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXRjaEZzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCxrQ0FBa0MsR0FDbkMsTUFBTSxxQkFBcUIsQ0FBQTtBQUM1QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBQ3BDLE9BQU8sUUFBUSxNQUFNLFdBQVcsQ0FBQTtBQUVoQyxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxVQUFrQixFQUFFLEVBQUU7SUFDbEQsSUFBSSxDQUFDO1FBQ0gsT0FBTyxRQUFRLENBQUMsVUFBVSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDO2FBQ3pDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDN0MsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7SUFDOUMsQ0FBQztJQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDWCxPQUFPLEVBQUUsQ0FBQTtJQUNYLENBQUM7QUFDSCxDQUFDLENBQUE7QUFPRCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLGdCQUF3QixFQUFrQixFQUFFO0lBQzVFLE1BQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0lBRTdDLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUN2QixPQUFPO1lBQ0wsYUFBYSxFQUFFLENBQUM7WUFDaEIseUJBQXlCLEVBQUUsRUFBRTtZQUM3QixRQUFRLEVBQUUsRUFBRTtTQUNiLENBQUE7SUFDSCxDQUFDO0lBRUQsTUFBTSxRQUFRLEdBQWEsRUFBRSxDQUFBO0lBRTdCLE1BQU0seUJBQXlCLEdBQTRDLEVBQUUsQ0FBQTtJQUM3RSxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ3pCLE1BQU0sT0FBTyxHQUFHLGtDQUFrQyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ3hELElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNiLFFBQVEsQ0FBQyxJQUFJLENBQUMsZ0RBQWdELElBQUksRUFBRSxDQUFDLENBQUE7WUFDckUsU0FBUTtRQUNWLENBQUM7UUFDRCxJQUFJLENBQUMseUJBQXlCLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7WUFDdEQseUJBQXlCLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtRQUN2RCxDQUFDO1FBQ0QseUJBQXlCLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNoRSxDQUFDO0lBQ0QsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLHlCQUF5QixDQUFDLEVBQUUsQ0FBQztRQUMzRCxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFOztZQUNoQixPQUFPLENBQUMsTUFBQSxDQUFDLENBQUMsY0FBYyxtQ0FBSSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQUEsQ0FBQyxDQUFDLGNBQWMsbUNBQUksQ0FBQyxDQUFDLENBQUE7UUFDMUQsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDO0lBRUQsT0FBTztRQUNMLGFBQWEsRUFBRSxLQUFLLENBQUMsTUFBTTtRQUMzQix5QkFBeUI7UUFDekIsUUFBUTtLQUNULENBQUE7QUFDSCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBQYXRjaGVkUGFja2FnZURldGFpbHMsXG4gIGdldFBhY2thZ2VEZXRhaWxzRnJvbVBhdGNoRmlsZW5hbWUsXG59IGZyb20gXCIuL1BhY2thZ2VEZXRhaWxzLmpzXCJcbmltcG9ydCB7IHJlbGF0aXZlIH0gZnJvbSBcIi4vcGF0aC5qc1wiXG5pbXBvcnQga2xhd1N5bmMgZnJvbSBcImtsYXctc3luY1wiXG5cbmV4cG9ydCBjb25zdCBnZXRQYXRjaEZpbGVzID0gKHBhdGNoZXNEaXI6IHN0cmluZykgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiBrbGF3U3luYyhwYXRjaGVzRGlyLCB7IG5vZGlyOiB0cnVlIH0pXG4gICAgICAubWFwKCh7IHBhdGggfSkgPT4gcmVsYXRpdmUocGF0Y2hlc0RpciwgcGF0aCkpXG4gICAgICAuZmlsdGVyKChwYXRoKSA9PiBwYXRoLmVuZHNXaXRoKFwiLnBhdGNoXCIpKVxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cbn1cblxuaW50ZXJmYWNlIEdyb3VwZWRQYXRjaGVzIHtcbiAgbnVtUGF0Y2hGaWxlczogbnVtYmVyXG4gIHBhdGhTcGVjaWZpZXJUb1BhdGNoRmlsZXM6IFJlY29yZDxzdHJpbmcsIFBhdGNoZWRQYWNrYWdlRGV0YWlsc1tdPlxuICB3YXJuaW5nczogc3RyaW5nW11cbn1cbmV4cG9ydCBjb25zdCBnZXRHcm91cGVkUGF0Y2hlcyA9IChwYXRjaGVzRGlyZWN0b3J5OiBzdHJpbmcpOiBHcm91cGVkUGF0Y2hlcyA9PiB7XG4gIGNvbnN0IGZpbGVzID0gZ2V0UGF0Y2hGaWxlcyhwYXRjaGVzRGlyZWN0b3J5KVxuXG4gIGlmIChmaWxlcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4ge1xuICAgICAgbnVtUGF0Y2hGaWxlczogMCxcbiAgICAgIHBhdGhTcGVjaWZpZXJUb1BhdGNoRmlsZXM6IHt9LFxuICAgICAgd2FybmluZ3M6IFtdLFxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHdhcm5pbmdzOiBzdHJpbmdbXSA9IFtdXG5cbiAgY29uc3QgcGF0aFNwZWNpZmllclRvUGF0Y2hGaWxlczogUmVjb3JkPHN0cmluZywgUGF0Y2hlZFBhY2thZ2VEZXRhaWxzW10+ID0ge31cbiAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XG4gICAgY29uc3QgZGV0YWlscyA9IGdldFBhY2thZ2VEZXRhaWxzRnJvbVBhdGNoRmlsZW5hbWUoZmlsZSlcbiAgICBpZiAoIWRldGFpbHMpIHtcbiAgICAgIHdhcm5pbmdzLnB1c2goYFVucmVjb2duaXplZCBwYXRjaCBmaWxlIGluIHBhdGNoZXMgZGlyZWN0b3J5ICR7ZmlsZX1gKVxuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaWYgKCFwYXRoU3BlY2lmaWVyVG9QYXRjaEZpbGVzW2RldGFpbHMucGF0aFNwZWNpZmllcl0pIHtcbiAgICAgIHBhdGhTcGVjaWZpZXJUb1BhdGNoRmlsZXNbZGV0YWlscy5wYXRoU3BlY2lmaWVyXSA9IFtdXG4gICAgfVxuICAgIHBhdGhTcGVjaWZpZXJUb1BhdGNoRmlsZXNbZGV0YWlscy5wYXRoU3BlY2lmaWVyXS5wdXNoKGRldGFpbHMpXG4gIH1cbiAgZm9yIChjb25zdCBhcnIgb2YgT2JqZWN0LnZhbHVlcyhwYXRoU3BlY2lmaWVyVG9QYXRjaEZpbGVzKSkge1xuICAgIGFyci5zb3J0KChhLCBiKSA9PiB7XG4gICAgICByZXR1cm4gKGEuc2VxdWVuY2VOdW1iZXIgPz8gMCkgLSAoYi5zZXF1ZW5jZU51bWJlciA/PyAwKVxuICAgIH0pXG4gIH1cblxuICByZXR1cm4ge1xuICAgIG51bVBhdGNoRmlsZXM6IGZpbGVzLmxlbmd0aCxcbiAgICBwYXRoU3BlY2lmaWVyVG9QYXRjaEZpbGVzLFxuICAgIHdhcm5pbmdzLFxuICB9XG59XG4iXX0=