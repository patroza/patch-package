import chalk from "chalk";
import fs from "fs-extra";
import { relative, resolve } from "../path.js";
import { normalize } from "path";
import { parsePatchFile } from "./parse.js";
export function readPatch({ patchFilePath, patchDetails, patchDir, }) {
    try {
        return parsePatchFile(fs.readFileSync(patchFilePath).toString());
    }
    catch (e) {
        const fixupSteps = [];
        const relativePatchFilePath = normalize(relative(process.cwd(), patchFilePath));
        const patchBaseDir = relativePatchFilePath.slice(0, relativePatchFilePath.indexOf(patchDir));
        if (patchBaseDir) {
            fixupSteps.push(`cd ${patchBaseDir}`);
        }
        fixupSteps.push(`patch -p1 -i ${relativePatchFilePath.slice(relativePatchFilePath.indexOf(patchDir))}`);
        fixupSteps.push(`npx patch-package ${patchDetails.pathSpecifier}`);
        if (patchBaseDir) {
            fixupSteps.push(`cd ${relative(resolve(process.cwd(), patchBaseDir), process.cwd())}`);
        }
        console.log(`
${chalk.red.bold("**ERROR**")} ${chalk.red(`Failed to apply patch for package ${chalk.bold(patchDetails.humanReadablePathSpecifier)}`)}
    
  This happened because the patch file ${relativePatchFilePath} could not be parsed.
   
  If you just upgraded patch-package, you can try running:
  
    ${fixupSteps.join("\n    ")}
    
  Otherwise, try manually creating the patch file again.
  
  If the problem persists, please submit a bug report:
  
    https://github.com/ds300/patch-package/issues/new?title=Patch+file+parse+error&body=%3CPlease+attach+the+patch+file+in+question%3E

`);
        process.exit(1);
    }
    return [];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXRjaC9yZWFkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQTtBQUN6QixPQUFPLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFDekIsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFDOUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLE1BQU0sQ0FBQTtBQUVoQyxPQUFPLEVBQUUsY0FBYyxFQUFpQixNQUFNLFlBQVksQ0FBQTtBQUUxRCxNQUFNLFVBQVUsU0FBUyxDQUFDLEVBQ3hCLGFBQWEsRUFDYixZQUFZLEVBQ1osUUFBUSxHQUtUO0lBQ0MsSUFBSSxDQUFDO1FBQ0gsT0FBTyxjQUFjLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO0lBQ2xFLENBQUM7SUFBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQ1gsTUFBTSxVQUFVLEdBQWEsRUFBRSxDQUFBO1FBQy9CLE1BQU0scUJBQXFCLEdBQUcsU0FBUyxDQUNyQyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLGFBQWEsQ0FBQyxDQUN2QyxDQUFBO1FBQ0QsTUFBTSxZQUFZLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUM5QyxDQUFDLEVBQ0QscUJBQXFCLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUN4QyxDQUFBO1FBQ0QsSUFBSSxZQUFZLEVBQUUsQ0FBQztZQUNqQixVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sWUFBWSxFQUFFLENBQUMsQ0FBQTtRQUN2QyxDQUFDO1FBQ0QsVUFBVSxDQUFDLElBQUksQ0FDYixnQkFBZ0IscUJBQXFCLENBQUMsS0FBSyxDQUN6QyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQ3hDLEVBQUUsQ0FDSixDQUFBO1FBQ0QsVUFBVSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsWUFBWSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUE7UUFDbEUsSUFBSSxZQUFZLEVBQUUsQ0FBQztZQUNqQixVQUFVLENBQUMsSUFBSSxDQUNiLE1BQU0sUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsWUFBWSxDQUFDLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FDdEUsQ0FBQTtRQUNILENBQUM7UUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDO0VBQ2QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FDcEMscUNBQXFDLEtBQUssQ0FBQyxJQUFJLENBQzdDLFlBQVksQ0FBQywwQkFBMEIsQ0FDeEMsRUFBRSxDQUNKOzt5Q0FFb0MscUJBQXFCOzs7O01BSXhELFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDOzs7Ozs7OztDQVE5QixDQUFDLENBQUE7UUFDRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ2pCLENBQUM7SUFDRCxPQUFPLEVBQUUsQ0FBQTtBQUNYLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhbGsgZnJvbSBcImNoYWxrXCJcbmltcG9ydCBmcyBmcm9tIFwiZnMtZXh0cmFcIlxuaW1wb3J0IHsgcmVsYXRpdmUsIHJlc29sdmUgfSBmcm9tIFwiLi4vcGF0aC5qc1wiXG5pbXBvcnQgeyBub3JtYWxpemUgfSBmcm9tIFwicGF0aFwiXG5pbXBvcnQgeyBQYWNrYWdlRGV0YWlscyB9IGZyb20gXCIuLi9QYWNrYWdlRGV0YWlscy5qc1wiXG5pbXBvcnQgeyBwYXJzZVBhdGNoRmlsZSwgUGF0Y2hGaWxlUGFydCB9IGZyb20gXCIuL3BhcnNlLmpzXCJcblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRQYXRjaCh7XG4gIHBhdGNoRmlsZVBhdGgsXG4gIHBhdGNoRGV0YWlscyxcbiAgcGF0Y2hEaXIsXG59OiB7XG4gIHBhdGNoRmlsZVBhdGg6IHN0cmluZ1xuICBwYXRjaERldGFpbHM6IFBhY2thZ2VEZXRhaWxzXG4gIHBhdGNoRGlyOiBzdHJpbmdcbn0pOiBQYXRjaEZpbGVQYXJ0W10ge1xuICB0cnkge1xuICAgIHJldHVybiBwYXJzZVBhdGNoRmlsZShmcy5yZWFkRmlsZVN5bmMocGF0Y2hGaWxlUGF0aCkudG9TdHJpbmcoKSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnN0IGZpeHVwU3RlcHM6IHN0cmluZ1tdID0gW11cbiAgICBjb25zdCByZWxhdGl2ZVBhdGNoRmlsZVBhdGggPSBub3JtYWxpemUoXG4gICAgICByZWxhdGl2ZShwcm9jZXNzLmN3ZCgpLCBwYXRjaEZpbGVQYXRoKSxcbiAgICApXG4gICAgY29uc3QgcGF0Y2hCYXNlRGlyID0gcmVsYXRpdmVQYXRjaEZpbGVQYXRoLnNsaWNlKFxuICAgICAgMCxcbiAgICAgIHJlbGF0aXZlUGF0Y2hGaWxlUGF0aC5pbmRleE9mKHBhdGNoRGlyKSxcbiAgICApXG4gICAgaWYgKHBhdGNoQmFzZURpcikge1xuICAgICAgZml4dXBTdGVwcy5wdXNoKGBjZCAke3BhdGNoQmFzZURpcn1gKVxuICAgIH1cbiAgICBmaXh1cFN0ZXBzLnB1c2goXG4gICAgICBgcGF0Y2ggLXAxIC1pICR7cmVsYXRpdmVQYXRjaEZpbGVQYXRoLnNsaWNlKFxuICAgICAgICByZWxhdGl2ZVBhdGNoRmlsZVBhdGguaW5kZXhPZihwYXRjaERpciksXG4gICAgICApfWAsXG4gICAgKVxuICAgIGZpeHVwU3RlcHMucHVzaChgbnB4IHBhdGNoLXBhY2thZ2UgJHtwYXRjaERldGFpbHMucGF0aFNwZWNpZmllcn1gKVxuICAgIGlmIChwYXRjaEJhc2VEaXIpIHtcbiAgICAgIGZpeHVwU3RlcHMucHVzaChcbiAgICAgICAgYGNkICR7cmVsYXRpdmUocmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBwYXRjaEJhc2VEaXIpLCBwcm9jZXNzLmN3ZCgpKX1gLFxuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKGBcbiR7Y2hhbGsucmVkLmJvbGQoXCIqKkVSUk9SKipcIil9ICR7Y2hhbGsucmVkKFxuICAgICAgYEZhaWxlZCB0byBhcHBseSBwYXRjaCBmb3IgcGFja2FnZSAke2NoYWxrLmJvbGQoXG4gICAgICAgIHBhdGNoRGV0YWlscy5odW1hblJlYWRhYmxlUGF0aFNwZWNpZmllcixcbiAgICAgICl9YCxcbiAgICApfVxuICAgIFxuICBUaGlzIGhhcHBlbmVkIGJlY2F1c2UgdGhlIHBhdGNoIGZpbGUgJHtyZWxhdGl2ZVBhdGNoRmlsZVBhdGh9IGNvdWxkIG5vdCBiZSBwYXJzZWQuXG4gICBcbiAgSWYgeW91IGp1c3QgdXBncmFkZWQgcGF0Y2gtcGFja2FnZSwgeW91IGNhbiB0cnkgcnVubmluZzpcbiAgXG4gICAgJHtmaXh1cFN0ZXBzLmpvaW4oXCJcXG4gICAgXCIpfVxuICAgIFxuICBPdGhlcndpc2UsIHRyeSBtYW51YWxseSBjcmVhdGluZyB0aGUgcGF0Y2ggZmlsZSBhZ2Fpbi5cbiAgXG4gIElmIHRoZSBwcm9ibGVtIHBlcnNpc3RzLCBwbGVhc2Ugc3VibWl0IGEgYnVnIHJlcG9ydDpcbiAgXG4gICAgaHR0cHM6Ly9naXRodWIuY29tL2RzMzAwL3BhdGNoLXBhY2thZ2UvaXNzdWVzL25ldz90aXRsZT1QYXRjaCtmaWxlK3BhcnNlK2Vycm9yJmJvZHk9JTNDUGxlYXNlK2F0dGFjaCt0aGUrcGF0Y2grZmlsZStpbitxdWVzdGlvbiUzRVxuXG5gKVxuICAgIHByb2Nlc3MuZXhpdCgxKVxuICB9XG4gIHJldHVybiBbXVxufVxuIl19